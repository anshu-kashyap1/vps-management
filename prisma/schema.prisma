generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPPORT
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum VMStatus {
  PENDING
  PROVISIONING
  RUNNING
  STOPPED
  FAILED
  SUSPENDED
  TERMINATED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
  ANNUALLY
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Models
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String
  resetPasswordToken  String?   @map("reset_password_token")
  resetPasswordExpire DateTime? @map("reset_password_expire")
  fullName      String
  role          UserRole  @default(USER)
  status        UserStatus @default(ACTIVE)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  lastLogin     DateTime? @map("last_login")
  phoneNumber   String?   @map("phone_number")
  address       Json?
  company       String?
  
  // Billing Information
  billingEmail  String?   @map("billing_email")
  billingInfo   Json?     @map("billing_info")
  
  // Relations
  virtualMachines VirtualMachine[]
  payments        Payment[]
  tickets         Ticket[]        @relation("UserTickets")
  assignedTickets Ticket[]        @relation("AssignedTickets")
  ticketMessages  TicketMessage[]
  apiKeys         ApiKey[]

  @@map("users")
}

model VirtualMachine {
  id              String    @id @default(uuid())
  userId          String    @map("user_id")
  planId          String    @map("plan_id")
  name            String
  hostname        String?
  status          VMStatus  @default(PENDING)
  ipAddress       String?   @map("ip_address")
  proxmoxVmId     Int?      @map("proxmox_vm_id")
  proxmoxNode     String?   @map("proxmox_node")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  expiresAt       DateTime? @map("expires_at")
  autoRenew       Boolean   @default(true) @map("auto_renew")
  notes           String?
  
  // VM Specifications
  specs           Json      // Store CPU, RAM, Storage configurations
  
  // Relations
  user            User      @relation(fields: [userId], references: [id])
  plan            Plan      @relation(fields: [planId], references: [id])
  payments        Payment[]
  backups         Backup[]
  tickets         Ticket[]
  usageMetrics    UsageMetric[]

  @@map("virtual_machines")
}

model Plan {
  id              String        @id @default(uuid())
  name            String
  description     String?
  cpu             Int
  ram             Int          // in GB
  storage         Int          // in GB
  bandwidth       Int          // in GB
  price           Float
  billingCycle    BillingCycle @default(MONTHLY)
  isActive        Boolean      @default(true) @map("is_active")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  
  // Relations
  virtualMachines VirtualMachine[]

  @@map("plans")
}

model Payment {
  id              String        @id @default(uuid())
  userId          String        @map("user_id")
  vmId            String        @map("vm_id")
  amount          Float
  currency        String        @default("USD")
  status          PaymentStatus @default(PENDING)
  paymentMethod   String        @map("payment_method")
  transactionId   String?       @unique @map("transaction_id")
  invoiceUrl      String?       @map("invoice_url")
  billingPeriod   Json          // Store start and end dates
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  
  // Relations
  user            User          @relation(fields: [userId], references: [id])
  virtualMachine  VirtualMachine @relation(fields: [vmId], references: [id])

  @@map("payments")
}

model Backup {
  id              String    @id @default(uuid())
  vmId            String    @map("vm_id")
  name            String
  size            Int       // in MB
  status          String
  location        String
  createdAt       DateTime  @default(now()) @map("created_at")
  expiresAt       DateTime? @map("expires_at")
  
  // Relations
  virtualMachine  VirtualMachine @relation(fields: [vmId], references: [id])

  @@map("backups")
}

model UsageMetric {
  id              String    @id @default(uuid())
  vmId            String    @map("vm_id")
  cpuUsage        Float     @map("cpu_usage")
  ramUsage        Float     @map("ram_usage")
  storageUsage    Float     @map("storage_usage")
  bandwidthUsage  Float     @map("bandwidth_usage")
  timestamp       DateTime  @default(now())
  
  // Relations
  virtualMachine  VirtualMachine @relation(fields: [vmId], references: [id])

  @@map("usage_metrics")
}

model Ticket {
  id              String         @id @default(uuid())
  userId          String        @map("user_id")
  assignedToId    String?       @map("assigned_to_id")
  vmId            String?       @map("vm_id")
  title           String
  description     String
  status          TicketStatus  @default(OPEN)
  priority        TicketPriority @default(MEDIUM)
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  
  // Relations
  user            User          @relation("UserTickets", fields: [userId], references: [id])
  assignedTo      User?         @relation("AssignedTickets", fields: [assignedToId], references: [id])
  virtualMachine  VirtualMachine? @relation(fields: [vmId], references: [id])
  messages        TicketMessage[]

  @@map("tickets")
}

model TicketMessage {
  id              String    @id @default(uuid())
  ticketId        String    @map("ticket_id")
  userId          String    @map("user_id")
  message         String    @db.Text
  createdAt       DateTime  @default(now()) @map("created_at")
  
  // Relations
  ticket          Ticket    @relation(fields: [ticketId], references: [id])
  user            User      @relation(fields: [userId], references: [id])

  @@map("ticket_messages")
}

model ApiKey {
  id              String    @id @default(uuid())
  userId          String    @map("user_id")
  key             String    @unique
  name            String
  lastUsed        DateTime? @map("last_used")
  expiresAt       DateTime? @map("expires_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  
  // Relations
  user            User      @relation(fields: [userId], references: [id])

  @@map("api_keys")
}